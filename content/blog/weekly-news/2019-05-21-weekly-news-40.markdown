---
layout: post
title: '그냥 저냥 #위클리뉴스 #40'
description: '그냥 저냥 #위클리뉴스 #40'
date: '2019-05-21 01:04'
tags: [programming, weekly-news]
category: 'weekly-news'
comments: true
draft: false
---

# 그냥 저냥 #위클리뉴스 #40

### 일반적인

- [회사에서 인정받는 8가지 방법](https://ppss.kr/archives/195590): 중요한 부분인데, 이 글에서 나온 부분을 내가 잘 못하고 있고 있는 것이 바로, "내가 했던 일들의 히스토리 남기기"이다. 과거에 내가 무슨 일을 했고, 어떻게 했는지를 잘 남겨두면, 나중에 내가 어떤 일들을 했고, 어떻게 했는지를 잘 남길 수 있는데, 그러한 것들을 잘 못했다. 그런 것들을 앞으로 좀 잘 할 수 있도록 해야겠다. 모든 사람에게 적용 될 만한 이야기라 직장인들이라면 읽어보길 추천한다.

### Server

- [신입 개발자가 스타트업에서 AWS로 살아남는 이야기 - 조용진(모두의 캠퍼스)](https://www.youtube.com/watch?v=r6TFnNQsQLY&feature=youtu.be): AWS를 아주 작은 범위로 서비스 하는 회사에 들어가 점진적으로 늘어나는 서비스에 대하여, AWS 스택을 늘리면서 많은 경험기를 담고 있으며, AWS Hacking에 대한 포스트모텀 후기까지 공유를 해주어, 많은 도움이 될 것이라 생각 한다. AWS를 잘 활용하는 것은 정말 편리하고 좋지만, 해킹 당하면 정말 위험하구나를 알려주어 경각심을 갖게 되었다.

- [마이크로 서비스 관련 글 총정리](https://www.popit.kr/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B4%80%EB%A0%A8-%EA%B8%80-%EC%B4%9D%EC%A0%95%EB%A6%AC/?fbclid=IwAR2QFsIkD1aUu7pxV2AAt2Awgd0meniEHMljWcMUaz2_9qX1TQbLGap3M6Y) : 이제까지 Popit에 올라 왔던 MSA 관련한 내용들의 집합인데, 주제별로 정리가 되어 있어서 참고하기 좋다.

- [KSUG 스프링캠프 2019 발표자료 - "무엇을 테스트할 것인가, 어떻게 테스트할 것인가"](https://www.slideshare.net/ssuser59a869/ksug-2019?fbclid=IwAR2UcYpT58l7AUEPj8vAXIUpllk4meCTlLk4aGDZJSnaECgMwpRR1sVkYAc): 권용근님의 발표자료인데, 동영상이 올라오면 좋겠다는 생각을 하게 되었다. 하지만, 슬라이드만으로도 전달 하고자 하는 내용을 잘 알 수 있었다. 테스트에 관해서는 사실, 좀 "어렵다"라는 생각을 많이 가지고 있었다. 그렇지만, 이 자료를 보면서 알 수 있었던 사실 하나는 내가 주로 **구현을 테스트 하고 있었다. 라는 사실을 깨달았다.** 그리고, 테스트 가능한 부분과 가능하지 않은 외부요인들을 구분하지 않고 테스트 코드에 넣고 있었다는 사실을 깨달았다.

- [자바, 성능, 모니터링 테크세미나 정리 및 후기 (by 우아한 형제들)](https://taetaetae.github.io/2019/05/12/got-of-java-seminar/) : 확실히 모니터링과 성능은 뗄려고 해도 뗄 수 없는 기생 관계라고 해야할까? 싶은 생각이 든다. Java 환경에서 APM 제품을 많이 알고 있진 않았는데, 굉장히 많은 제품들이 있다는 것을 깨달았고, 예전부터 관심 있던 Scouter의 기능이 생각보다 다양해서 Pinpoint의 기능보다 더 좋은 기능도 있다는 것을 알게 되었다. 물론,

- [웹 서버 개발의 Session 전략](https://devhaks.github.io/2019/04/20/session-strategy/): Session에 관해서 보통은 잘 모르기 쉽고, 왜 메모리에 저장하는것이 문제가 되는지?, 파일로 저장하게 될 경우에는 어떤 문제가 있는지? 모를 수 있다. 하지만, 이에 대해서 잘 정리 되어 있어서 세션에 관해서 공부하기 좋다. 다만, 여러 환경이 있을 수 있기에 어떤 것이 정답인지는 알 수 없지만, 확실한 건 케이스 별로 잘 알고 있는 것이 중요하다.

### Front

- [Why Performance Matters](https://developers.google.com/web/fundamentals/performance/why-performance-matters/): 일단, "사용자들은 기다려주지 않는다."는 말이 생각 났다. 실제로 통계적으로도 이탈률이나, 페이지 인입등에서 차이가 나기 시작한다는 것을 알 수 있다. 그러므로, 개발자들은 무엇을 할 수 있을지? 제안도 나열 되어 있다. 특히, React를 이제 막 써보는 입장이라 Preact에 관한 부분도 관심이 갔다. 대체제라면, 안 쓸 이유가 없기 때문이다.

- [[자바스크립트] 브라우저 렌더링](https://12bme.tistory.com/140): Browser가 어떻게 렌더링을 하는지에 대해서 단계적으로 설명을 하고 있으며, Reflow, Repaint이 어떻게 이루어지는지? 어떻게 하면서 Reflow 발생을 줄일 수 있는지에 대해서 설명하고 있다.

### Java

- [cheese10yun/blog-sample](https://github.com/cheese10yun/blog-sample/blob/master/exception/README.md): Java의 Checked Exception에 관한 글이다. Checked Exception에 관해서 설명을 하고 있으며, Unchecked Exception과의 비교를 통해 설명 하고 있다. 특히, Checked Exception은 Rollback을 하지 않는 다는 점을 기억하면 좋을 것 같다.

- [Wan Blog](https://minwan1.github.io/2017/10/08/2017-10-08-Spring-Container): Servlet Container에 관한 글인데, 읽다 보니 나도 잘 모르는 부분이 있었다. Spring Container가 구동 되는 시점에 이미 Bean으로 등록한 Object들이 생성 되는 점인데, 해당 부분은 모르던 내용이었다. 역시, Spring framework의 세계는 놀랍다.

- [Spring Boot - Logging, 20분 정리](https://www.sangkon.com/2019/03/18/hands-on-springboot-logging/): Spring boot에서 logging에 관하여 궁금하다면, 해당 아티클을 읽어보자. Logback을 사용하는데, 요즘은 log4j2 또한 logback 처럼 성능이 좋다고 들었다. 그래서 log4j를 제외하고, logback, log4j2를 취사선택해 사용하면 좋을 것 같다.

- [쓰레드풀 과 ForkJoinPool](https://hamait.tistory.com/m/612): Thread에 관해서 읽어보면 어떻게 동작하는지? 쉽게 그림으로 그려서 설명을 하고 있습니다. 더불어 Java7에서 나타난 ForkJoin Framework에 대해서 상세하게 설명을 해주어, 쉽고 빠르게 이해 할 수 있습니다.

### 개발자에게 도움이 되는

- [괜찮은 프론트 개발자](https://cresumerjang.github.io/2019/05/10/Frontend-Developer/): 도대체 어떤 업무를 해야 하는가?에 대해 궁금한 사람이 많을 수 있다고 생각한다. 프론트 개발자는 어느 부분까지 일 해야 하는 사람일까? 그런데, 이 글을 읽고 생각해보자. 프론트의 영역은 어디까지 일까? 내가 직접 코드를 짜야 나의 영역이 아니라, 그 이상의 영역에도 기본적인 지식을 있어야 한다는 생각과 같은 분의 글이라서 재밌게 읽었다.

- [흔하지 않고 좋은 웹 개발자가 되는 방법](https://joshua1988.github.io/web-development/translation/how-to-become-uncommonly-web-dev/): 정말 열정이 많으시고, 공유도 많이 하시는 Captain Pangyo님의 어떻게 하면, 좋은 개발자가 되는지에 대한 글입니다. 단계별로 설명을 해주시면서, 개인적인 경험 또한 녹아 있습니다.

- [문서화에 대해 아무도 말해주지 않는 것들 - 이상한모임](http://blog.weirdx.io/post/60414): 이 글을 읽을 사람들은 대부분 API 명세를 작업 해봤거나, 작게나마 라이브러리를 만들었던 사람들이 읽으면 훨씬 더 얻는 게 많을 것 같다. 일반적인 문서화라기보다는 코드 관련한 설명을 해야하고, 초기 시작 문서등을 작성해야 하는 사람들이 읽으면 더 좋을 것 같습니다. 하지만, 시간이 난다면, 반드시 읽어야 하는 문서화의 가이드를 제시 하고 있는 글입니다.

- [101 Bash Commands and Tips for Beginners to Experts](https://dev.to/awwsmm/101-bash-commands-and-tips-for-beginners-to-experts-30je#first-commands): `Bash`를 많이 쓰는 터라, 해당 글을 보자 마자 읽어 보았고, 제가 쓰던 기능들도 있지만, 알지 못했던 기능들도 있습니다. `ncdu,htop, locate등` 몰랐던 명령어들이 많습니다.

- [나는 왜 회사를 즐겁게 다니고 있나?](https://brunch.co.kr/@imagineer/314): 읽으면서 좋은 점이 많은 문화를 가졌다고 생각했습니다. 아프면 쉬어야 하고, 코드 리뷰는 개인의 인격에 대한 피드백이 아니다.라는 점들, 그리고 각기 모두 전문성을 가지고 있다는 점 또한 보기 좋았고, 저는 어떠한 전문성을 가지고 있는지? 없다면, 앞으로 어떻게 키워야 할지? 미래를 그리게 되었습니다.`나는 현재 회사에서 무엇 때문에 즐거운지?` 글로 써보는 시간을 할애하는 것도 좋겠다는 생각을 했습니다.

- [devJang/developer-roadmap](https://github.com/devJang/developer-roadmap/blob/master/readme.md): 개발자 로드맵의 한국어 버전입니다. 물론, 이 로드맵을 따라가야 하냐? 라는 질문에 있어서는 답변은 `?` 입니다. 정해진 왕도는 없습니다. 빨리 갈 수 있는 길도 없고, 다만 방향이 있을 뿐이라 본인의 관심과 맞다면, 한 번 학습을 해보는 것도 좋겠다. 정도로 받아들이시면 좋겠습니다.

- [여러 git 리파지토리 한꺼번에 git 명령어 적용하기](http://tech.javacafe.io/2018/12/15/%EC%97%AC%EB%9F%AC_git_%EB%A6%AC%ED%8C%8C%EC%A7%80%ED%86%A0%EB%A6%AC_%ED%95%9C%EA%BA%BC%EB%B2%88%EC%97%90_git_%EB%AA%85%EB%A0%B9%EC%96%B4_%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/): 여러 Repository에 Git command를 실행시키기 위해 `xargs` 명령어를 이용하는 점이 참신하다고 생각 했습니다. 역시 한 가지를 잘 알고, 그것을 잘 이용하는 것도 방법입니다.

### JavaScript

- [코드리뷰를 위한 좋은 코딩 - Javascript 편 - amati.io](https://amati.io/2019/04/18/good-coding-for-codereview-on-javascript/): 이 글을 읽으면서 코드 리뷰에 관한 부분이 참 좋았습니다. `"코드에겐 불친절하게, 사람에겐 친절하게…"` 라는 구절이 특히나 좋았습니다. 이 글을 읽으면서 계속 연습 해야 하는 부분이 PR의 사이즈를 줄이는 것입니다. 코드의 뭉텅이가 너무 크면, 리뷰가 불가능합니다. 그리고, 리뷰를 받는 것도 시간적인 딜레이가 생기는 일인데, 코드의 양이 많다 보면 훨씬 더 많은 시간이 필요로 한다는 것을 체험으로 깨달았습니다. 읽어보면, 대다수의 사람들의 생각이 결국 코드 가이드 라인들로 정립이 되어 코딩을 하게 된다는 것을 느낍니다. 개발을 같이 하는 사람들끼리 공통된 코드 가이드를 잘 정립하는 것은 좋습니다.

### 자료구조

- [아는만큼 Search tree](https://hackerwins.github.io/2019-05-10/search-tree?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&utm_medium=social): Tree 자료 구조 탐색하는 방법에 관한 정리 글이며, `BST, Self-balancing BST, AVL tree, Splay tree, Treap, B-tree, Red-black tree, B+tree` 까지 어떤 특징을 갖는지 정리 한 글이라 자료구조 공부하는 분들에게 좋습니다. 그런데, 제가 몰랐던 것들이 많아서..**"아! 언제 또 공부를 해야 하나"**라는 생각을 하긴 했습니다.

- [Data Structure and Algorithms (DSA) Tutorial](http://www.tutorialspoint.com/data_structures_algorithms): 기본적인 자료구조와 알고리즘에 관한 설명과 해법이 있습니다. 자료구조와 알고리즘을 공부하시는데 도움 될 것 같습니다. 특히, 처음 입문 하시는 분들이 읽어보시면 좋을 것 같습니다.
