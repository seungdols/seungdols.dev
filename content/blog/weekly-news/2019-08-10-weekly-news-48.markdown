---
layout: post
title: '그냥 저냥 #위클리뉴스 #48'
description: '그냥 저냥 #위클리뉴스 #48'
date: 2019-08-10 15:18:00
category: weekly-news
tags: [weekly-news, programming]
comments: true
draft: false
---

### 개발자에게 도움이 되는

[2019년 상반기 회고](https://jojoldu.tistory.com/436)

- 서버 개발자들의 핵인싸로 불리는 이동욱님의 상반기 회고이다. 여전히 다양한 활동을 많이 하시고, 회사 일도 바쁜데, 책 집필과 외부 세미나 참여, 잡지 기고등을 많이 하셨던 상반기의 회고록이다. (그런데, 도대체 연애까지 어떻게 다 하는걸까? 결론은 창천향로님은 헤르미온느다..)

[[B급 프로그래머] 7월 5주 소식(빅데이터/인공지능, 암호화폐/블록체인, 읽을거리 부문)](http://jhrogue.blogspot.com/2019/08/b-7-5_5.html)

- 딥러닝에 관한 글들은 항상 이해하기 어렵지만, 조금씩 보다 보면 어느 정도 트렌드는 인지 할 수 있어서 좋다고 생각 한다. 트위터나 페이스북이 딥러닝 연구를 하는 이유는 무엇 일까? 그런데 생각 해보면, 아주 작은 부분에서부터 연구를 시작해 서비스 적용을 아주 잘 하고 있다는 점이다. 그럼, 국내 IT회사들의 인공지능 연구는 얼마나 잘 되고 있는 것 일까?

[아파치 로드밸런싱으로 여러 WAS 운영하기](https://taetaetae.github.io/2019/08/04/apache-load-balancing/)

- 서버의 자원을 효율 적으로 사용하고자 한다면, 여러 `tomcat instance`를 두는 것도 방법이다. 물론, 나도서버를 운용 하면서 2개의 `Tomcat`을 `mod_jk` 모듈을 통해 `apache httpd` 서버와 연동 했으나, 특수한 상황이 생겨 `WAS`서버 외의 다른 서버 까지도 서빙을 해야 하는 이유가 생기게 되었다. 그래서 mod_jk로는 연동을 못하지만 다른 방법을 통해 로드 밸런싱을 설정 하여,`apache httpd`외 서버 내에 총 3개의 서버들이 동작하도록 설정 해 두었다. `mod_jk` 모듈이 사용하기는 좋지만, 해당 모듈을 지원 하지 않으면 쓸 수 없다. 그런 것들을 미리 찾아 보는 것이 좋겠다.

[💻 당신의 사이드 프로젝트를 위한 10가지 팁](https://velog.io/@chris/10-tips-for-starting-and-creating-side-projects)

- 사실 첫 마디가 제일 인상 깊다. 중요한 것은 꾸준히 사이드 프로젝트를 하는 것이 중요하다고 한다. 일주일에 한 시간씩이라도 내 프로그램을 만들어 보는 것은 중요하다고 생각 한다. 올해는 뭐라도 시작 했으면 좋겠다는 생각을 하게 된다. 간단하지만 유용한 웹 서비스를 하나 만들고 싶긴 하다. 물론, 사이드 프로젝트가 코딩에만 국한 되는 것은 아니다. 나의 주간 위클리 뉴스도 **사이드 프로젝트이다.**

### API

[REST](https://johngrib.github.io/wiki/REST/)

- RESTful API라는 말을 들으면 대부분 URI에 신경을 많이 쓰는데, 해당 아키텍처의 개념 중 극히 일부에 불과하다는 것을 논문을 읽어보면 알 수 있는데, 해당 로이 필딩의 논문을 직접 읽고 정리 한 기계인간님의 정리 글이다.

### JavaScript

['When to useMemo and useCallback' 를 읽고](https://rinae.dev/posts/review-when-to-usememo-and-usecallback)

- 요즘 들어 느끼는 것이지만, `useMemo`와 `useCallback`을 언제 써야 하는지에 대한 고민은 항상 된다. 이 글을 읽고나면 어느 정도 감이 오긴 온다. 그래서 무언가 자신만의 기준을 두는 것이 좋다고 생각이 되었다.

[[번역] GraphQL은 어떻게 Redux를 대체하는가](https://medium.com/@minsangk/%EB%B2%88%EC%97%AD-graphql%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-redux%EB%A5%BC-%EB%8C%80%EC%B2%B4%ED%95%98%EB%8A%94%EA%B0%80-81548967697)

- `React + Redux`의 구조에서 어떻게 `Redux`를 걷어내게 되었는지에 대한 글인데, `Apollo + GraphQL`을 통해 `Redux`의 스토어 구조가 필요 없어지고, 대체 하게 된 이유를 설명 한 글이다.

[Absolute path in VSCode with TypeScript, CRA, Jest (feat. craco) · Issue #60 · JaeYeopHan/tip-archive](https://github.com/JaeYeopHan/tip-archive/issues/60)

- `Jbee`님의 글인데, 깨알 꿀팁 글의 `Repo`인데, `VS Code`에서 `TypeScript`, `CRA`, `Jest`를 사용할 때 절대 경로를 사용 하는 것에 대한 꿀팁이다.

[](https://medium.com/vingle-tech-blog/react-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f255d6569849)

- `React`의 렌더링 이해와 최적화에 대한 글인데, 요즘 정말 대세라 생각 한다. 그런데, 무분별하게 컴포넌트를 만들다 보면 성능이 나오지 않을 때가 있다. 그렇다면, 이 글을 따라 최적화가 되어 있는지 확인 해보자.

[데이터의 변화를 알아내고 변화 과정을 추적 하는 ListDiffer](https://medium.com/naver-fe-platform/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B3%80%ED%99%94%EB%A5%BC-%EC%95%8C%EC%95%84%EB%82%B4%EA%B3%A0-%EB%B3%80%ED%99%94-%EA%B3%BC%EC%A0%95%EC%9D%84-%EC%B6%94%EC%A0%81-%ED%95%98%EB%8A%94-listdiffer-9c3f1d770542)

- `Daybrush`님은 요새 많은 라이브러리를 만드시는데 죄다 좋은 라이브러리를 만들고 계신다. 특히나, 요즘 주류의 렌더링 라이브러리/프레임워크를 모두 지원 하도록 만드는 점이 나는 참 멋있다고 생각 한다. 해당 라이브러리는 **데이터의 변화를 포착하고, 추적 하는 라이브러리**라고 한다. (사용할 곳이 어딜까 고민을 좀 해봐야겠다.)

[JavaScript 비동기 처리를 위한 promise 이해하기](https://velog.io/@cyranocoding/2019-08-02-1808-%EC%9E%91%EC%84%B1%EB%90%A8-5hjytwqpqj)

- `Promise`를 제대로 이해 하지 못한다면, `async / await`를 잘 못 사용하게 될 가능성이 높다. 그래서 `Promise`를 잘 이해하는 것이 비동기 처리를 잘 할 수 있는 기본이라고 생각하는데, 해당 기본에 대해 잘 정리 된 글이다.

[TypeScript Deep Dive](https://basarat.gitbooks.io/typescript/content/)

- `TypeScript`를 점점 안 쓰는 곳이 없을 정도로 요즘은 정말 많이 사용하는 언어 중에 하나인데, 물론 컴파일 타임에 대한 불편이 있을 수는 있다. 물론, 쓰지 않는 것도 방법이지만, 정적 타이핑이 버그를 줄이는데 보통 `20%`를 컴파일 타임에 잡을 수 있으니, 쓰는게 더 좋다고 생각한다. 그럴려면, 잘 배워야 하는데 해당 페이지에 설명이 정말 잘 되어 있다. (영어)

[NAVER D2](https://d2.naver.com/helloworld/0145894)

[NAVER D2](https://d2.naver.com/helloworld/2108442)

- 2019 JavaScript 동향인데, 상당히 자세하고, 각 라이브러리/프레임워크 별로 구분하며, 과거와 앞으로의 미래에 대한 방향성을 잘 정리 한 글이다.

### SCSS

[SCSS](https://velog.io/@psm8873/SCSS)

- 프론트 개발은 하지만, 정작 마크업 개발은 하지 않기에 궁금증이 많긴 했다. 어떤 부분은 프론트 개발자가 해야 하고, 어떤 부분은 마크업 개발자가 해야 하는 영역일까? 그래서 요즘 `css, scss`에 관심이 많아졌다. 조금씩 개념이라도 익히려고 찾아보았다. `SCSS`에 대해 기본적인 설명을 잘 해둔 글이다.

### 일반적인

[회의에서 똑똑해 보이는 10가지 기술](https://brunch.co.kr/@jumjan/391)

- 좋은 내용도 있지만, 그다지 의미가 있는지 잘 모르겠는 내용도 있었다.

### Java

[테스트 코드 작성에 대한 나름의 고찰 - Yun Blog | 기술 블로그](https://cheese10yun.github.io/spring-about-test/)

- `Test`에 대한 부분은 정말 개발자마다 다르다. 어떤 이는 `Mock`을 엄청 사용하고, 어떤 이는 Action의 값에 대한 검증을 주로 하고, 보통 파도 나뉜다. `Classicist vs Mockist` 정답은 없지만 중요한 핵심은 내가 작성한 코드가 잘 동작하는 지를 확인 하는 것에 초점을 맞춰야 한다. 그게 중요하다.

[SpringBoot기반 Redis Cache 활용법](https://medium.com/@yongkyu.jang/%EC%9A%B0%EB%A6%AC%EA%B0%80-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EB%B0%B1%EC%95%A4%EB%93%9C-%EC%98%81%EC%97%AD%EC%97%90%EC%84%9C-cache%EB%A5%BC-%EC%A0%81%EA%B7%B9%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B2%8C-%EB%90%98%EB%A9%B4-%EC%83%9D%EA%B0%81%ED%96%88%EB%8D%98%EA%B2%83-%EB%B3%B4%EB%8B%A4-%EB%8D%94-%EB%93%9C%EB%9D%BC%EB%A7%88%ED%8B%B1%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0%EC%9D%84-%EA%B0%80%EC%A0%B8%EC%98%AC-%EC%88%98-%EC%9E%88%EB%8B%A4-%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%9C%EB%8B%A4-98ab99adfd69)

- 아마 `Spring Data Redis`의 라이브러리를 이용해 저장하고, 가져오고 해도 되지만, 어노테이션 기반으로 잘 만들어진 라이브러리가 있다면 사용하는 것은 나쁘지 않다고 생각 한다. 물론, `Spring Data Redis vs Spring Boot Data Redis Starter` 차이는 어떤 점이 있는지 궁금하긴 하다.
