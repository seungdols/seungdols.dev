---
layout: post
title: '그냥 저냥 #위클리뉴스 #73'
description: '그냥 저냥 #위클리뉴스 #73'
date: 2020-04-12 20:04:22
category: weekly-news
tags: [weekly-news, programming]
comments: true
draft: false
---

### 💻개발자에게 도움이 되는

[(번역) 세상은 왜 CSS개발자를 필요로 하는가?](https://medium.com/@Baksure/%EB%B2%88%EC%97%AD-%EC%84%B8%EC%83%81%EC%9D%80-%EC%99%9C-css%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%ED%95%84%EC%9A%94%EB%A1%9C-%ED%95%98%EB%8A%94%EA%B0%80-c3465999301b)

- `CSS 개발자가 필요한 이유, 솔직히 내가 항상 생각하는 유능한 마크업 개발자가 절실하게 필요한 이유가 이 이유이다.` 물론, 프론트 개발자가 다 해도 되는 분야이기도 하지만, 나는 전문적인 마크업 개발자가 필요하다고 생각하는 편이다. 그래야 프론트 개발자가 더 집중도 있게 개발이 가능하리라 생각 한다. 물론, 이 글에 반대 하는 이들도 있으리라 생각 한다.

[쿠폰 재고의 설계 및 개발](https://pkgonan.github.io/2020/04/stock)

- **쿠폰 재고에 대한 설계와 개발을 스펙과 전체적인 디자인**에 대해 잘 소개 하고 있으며, 특정한 문제와 어느 정도의 논이슈 처리등에 대한 근거와 감안 할 수 있는 이유, `Redis`를 사용한 명확한 이유를 잘 제시하고 있어서 정독 하면 좋겠다.

[git 교육 자료](https://johngrib.github.io/wiki/git-tutorial/)

- 기계인간님께서 남겨주신 `Git`의 교육자료인데, `Git`을 학습하는 새로운 시각이다. 정말 좋은 내용이기 때문에 읽어보면 좋겠다. (그런데, `CLI`의 달인이셔서 멋있다..)

[빠르고 정확하게 답변을 받을 수 있는 질문하는 법 | asbubam's blog](https://blog.2dal.com/2020/04/01/%EB%B9%A0%EB%A5%B4%EA%B3%A0-%EC%A0%95%ED%99%95%ED%95%98%EA%B2%8C-%EB%8B%B5%EB%B3%80%EC%9D%84-%EB%B0%9B%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%A7%88%EB%AC%B8%ED%95%98%EB%8A%94-%EB%B2%95/)

- 질문 하는 법에 대한 부분이 중요 하지 않을 것 같지만, `빠르게 내가 원하는 정보를 얻기 위해서는 질문에 대해서도 '잘' 하는 것이 중요한데, 정말 세세하게 정리가 되어 있다.`

[개발 조직의 문화와 제품의 개발 속도](https://suhyunbaik.github.io/devops/2020/04/01/dev-culture-and-speed/)

- `Post Mortem`을 하는 개발 조직은 정말 좋은 문화라고 생각 한다. `보통 이 문화가 없으면, 장애를 낸 개발자에게 대부분, "XX끼 때문에 장애 났다"고 말하거나, 속으로 생각 한다.` 근데, 그렇게 문화를 갖고 있으면, 아무런 도움이 되지 않는다. 아무도 도전적인 것을 하지 않게 된다.

[vivi의 카카오 겨울 개발자 인턴십 성장기](https://tech.kakao.com/2020/04/01/2019-internship-vivi/)

[fred의 카카오 겨울 인턴십을 돌아보며](https://tech.kakao.com/2020/04/01/2019-internship-fred/)

[카카오의 신입 개발자 온보딩 과정 - 개발자로 거듭나기](https://tech.kakao.com/2020/03/23/becoming-a-kakao-developer/)

[두 달 간의 신입 개발자 온보딩 과정을 돌아보며 - 신입 개발자들과의 인터뷰](https://tech.kakao.com/2020/03/30/newkrew-interview/)

- `인턴십부터 신입 개발자들의 온보딩까지의 과정`을 알 수 있는데, 카카오의 문화를 조금은 알 수 있다. 회사에 입사하는 모든 이들에게 적정한 온보딩 문화를 부여 하는게 좋다고 생각하는 편이다. **신입 개발자만 이 회사에 처음 오는 것이 아닌, 경력직들에게도 일정 시간 필요한 문화가 아닐까? 생각 한다.**

[코드리뷰로 시작하는 건강한 개발 문화](https://blog.shiren.dev/2020-01-11-%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EA%B1%B4%EA%B0%95%ED%95%9C-%EA%B0%9C%EB%B0%9C-%EB%AC%B8%ED%99%94/)

- 건강한 문화는 무엇일까? 고민스러울 때가 있다. 코딩 스타일에 대한 부분은 요즘 컨벤션으로 보통 통일 하는 추세이다. 그리고 테스트 코드를 작성해도 된다. 하지만, 모두가 작성 하진 않는다. 그럼 좋은 문화일까? `문화는 결국 같은 수준과 방향성을 팀내 모두가 가져야 하지 않을까? 생각하게 되었다.`

[기술 뉴스 #147 : 20-04-01 :: Outsider's Dev Story](https://blog.outsider.ne.kr/1480)

- 여러 글 모음이 있는 글인데, 리액트 렌더링의 모니터링을 위해 `Profiler`를 이용해 Grafana로 전송 하는 글이 참 신기 했다. 저런 생각을 하는 구나 싶기도 하고, 실무에서 잘 쓸 수 있을까? 싶기도 하고, 좀 재밌어 보이긴 했다. `Dropbox의 Sync 알고리즘을` `Python`에서 `Rust`로 재작성을 했다고 한다. 초창기 코드이다 보니 아마 나름의 레거시였을터! 좋은 글이 공유 되었다.

[2. 진화하는 기업문화](https://brunch.co.kr/@svillustrated/74)

- `진화 하는 것은 다양한 사람들이 모여 있다는 뜻일까?` 왜 한국 기업에서는 미국 기업의 문화, 글로벌 진출 하자 하면서도 그러한 문화가 그려지지 않는 것인가? 궁금하다.

[[B급 프로그래머] 4월 1주 소식(개발/관리도구, 고성능 서버/데이터베이스 부문)](http://jhrogue.blogspot.com/2020/04/b-4-1.html)

- 다양한 글 모음들이 존재 하는데, 너무 많아서 다 읽어보진 못했다. `Next.js 소식, Git 관련 글, 도커` 글들을 참고 했다.

[ECMAScript 2020의 새로운 점](https://ui.toast.com/weekly-pick/ko_20200409/?fbclid=IwAR2YWdr8_lOegZflaJSdAfG9nuTApDd3wNvRLmvA-KmNXNQhoNPzDUDqByo)

- `Optional Chaning` 같은 경우는 TS 3.7에서부터는 쓸 수 있어서 편리한데, 다양한 기능 제안들이 나왔고, 대부분 Stage 3에 온 기능들이 있어서 확인 해보면 좋겠다.

[FrontEnd Application에서 Null 다루기](https://jbee.io/react/react-data-null-handling/)

- `Null`에 관한 부분인데, 컴포넌트는 데이터에 대한 유효 처리를 하지 않고, `Store Level`에서 한다는 부분도 좀 재미났다. 우리는 생각보다 대부분 컴포넌트 레벨에서 처리 하는데, `Store Level`에서 처리하는 방법도 좋은 생각이다 싶었다. 어떻게 잘 적용할 수 있을지? 고민 해야겠다. (`Optional Chaining`을 써도 결국 **Object property의 depth**가 깉어지면, 코드는 더럽다.)

[useCallback과 React.Memo을 통한 렌더링 최적화](https://velog.io/@yejinh/useCallback%EA%B3%BC-React.Memo%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94)

- `useCallback, Memo`에 대해 상세하게 잘 정리 되어 있는 글이다.

[Acing the JavaScript Interview: top questions explained](https://dev.to/educative/acing-the-javascript-interview-top-questions-explained-59b7)

- `JavaScript` 인터뷰 중에 받을 수 있는 질문에 대한 설명 글인데, 질문의 질도 좋지만, 설명도 잘 되어 있다.

[컴포넌트 분리의 미학](<[https://vallista.kr/2020/03/29/Component-분리의-미학/](https://vallista.kr/2020/03/29/Component-%EB%B6%84%EB%A6%AC%EC%9D%98-%EB%AF%B8%ED%95%99/)>)

- 코드를 기반으로 컴포넌트 분리에 대해 `React` 코드로 잘 설명 하고 있는데, 특히 예시를 잘 들어주어 쉽게 이해 할 수 있었다.

[Lerna(🐉)로 모노레포 해보러나?](https://medium.com/jung-han/lerna-%EB%A1%9C-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%ED%95%B4%EB%B3%B4%EB%9F%AC%EB%82%98-34c8e008106a)

- `lerna`가 주목 받기 시작했다. `yarn workspaces`의 경우 모듈간의 중복 설치를 막아주는 오버헤드를 줄여주는 점은 좋지만, 의존성 관리가 쉽지 않다. (실무에서 써보고 있는데, 팀 내에서 진짜 작게 써볼만하다고 생각한다.) 차라리, `lerna`가 "더 좋을 수도 있겠다"라는 생각이 드는 요즘에 딱 좋은 글을 발견 했다.

### 🐳Container

[도커 이미지 잘 만드는 방법 :: 조은우 개발 블로그](https://jonnung.dev/docker/2020/04/08/optimizing-docker-images/)

- `도커 레이어를 줄이면 좋은줄 알았는데, 이제는 아니라니!` 새로운 사실을 알게 되었고, 다양한 꿀팁들이 있는 글이라, 꼭 꼭 읽어보시면 좋겠습니다.

[스포카에서 Helm을 도입 하는 이야기](https://spoqa.github.io/2020/03/30/k8s-with-helm-chart.html)

- 스포카에서 `Helm`을 도입하여 적용하면서 얻은 노하우를 블로그에 남겨주셨다. 나도 이제 막 공부를 하는 단계인데, `Helm`을 적용 할 예정이시라면, 꼭 읽어보시면 좋겠습니다. (`range` 메모..)

### 🔧Java

[ApplicationContext 와 WebApplicationType](https://pplenty.tistory.com/2)

- 이 글을 읽고나니 내가 쓰는 스프링에 대해 너무 무관심 했구나 라는 사실을 알게 되었다. 이 글을 읽어 보시면, 구현체를 어떻게 선택하는지 알 수 있다. (물론, 직접 따라 들어가봐도 될 것 같다.)

### 👍🏻일반적인

[같이 일하고 싶은 사람](https://brunch.co.kr/@hyungsukkim/99)

- 이 글에서만 나오는 것 뿐만 아니라 일 잘 하고 싶은 것에는 아마 `긍정적인 영향력`도 포함 되지 않을까 한다. 나는 생각해보면, 부정적인 말을 많이 하는 동료에 가깝지 않았나? 반성 해본다.

[빠듯하게 살던 직장인이 '경제적 자유'를 얻은 비밀: "매일 밥 먹듯 하는" 재테크 달인 박지수 작가 인터뷰](https://ppss.kr/archives/215670)

- 이 글에서 강의 대한 홍보보다는 이 분처럼 여유롭게 투자 하는 것이 중요하고, 항상 원칙적인 투자 바운더리가 있다는게 내가 배워야 할 점이었다. `결국, 돈을 잃지 않고 투자를 유지 하는 것은 결국, 일확천금을 얻는 것에 대한 자유로움으로부터 시작 된다.` 그 부분을 깨닫게 되었다.

['근데'를 자주 쓰나요? 상대방의 머리에는 부정적인 그림이 그려집니다](https://ppss.kr/archives/214836)

- **'근데'**를 나도 생각보다 정말 많이 쓰는 편인데, 이 글을 읽고 아! 사소한 단어지만, 상대방에게는 좋지 않을 수 있다는 점을 깨달았다. `역시, 가는 말이 고와야 하는구나.`
