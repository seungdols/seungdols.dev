---
layout: post
title: '그냥 저냥 #위클리뉴스 #68'
description: '그냥 저냥 #위클리뉴스 #68'
date: 2020-03-07 08:53:00
category: weekly-news
tags: [weekly-news, programming]
comments: true
draft: false
---

### 💻개발자에게 도움이 되는

[기술 뉴스 #145 : 20-03-02 :: Outsider's Dev Story](https://blog.outsider.ne.kr/1478?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+rss_outsider_dev+%28Outsider%27s+Dev+Story%29)

- 라인 메신저에서 트래픽을 대응 하기 위해 고군분투 하는 내용, `Armeria` 관련 글들이 인상적이었다. 그 외에도 재밌는 내용들이 많아 읽어 보길 추천한다.

[연봉 2억 5천도 살기힘든 미친동네. 실리콘밸리](https://www.youtube.com/watch?v=u_nCa85q_qU&t=185s)

- 실리콘 밸리를 꿈꾸는 사람들이 있다면, 봐야 할 영상. 페이스북, 구글, 아마존에 다니더라도 문제는 샌프란시스코의 집값이 어마어마하게 높다는 문제가 있다. `대략, 10억-20억 연봉을 받으면 편할 순 있을 듯 하다.` 근데 그럴 일이 없다. (시니어 엔지니어의 연봉도 3-5억 사이)

[ROKROKSS](https://rokrokss.com/post/2019/10/17/%EB%8F%84%EC%BB%A4-Docker-%EC%A0%95%EB%A6%AC.html)

- `도커와 가상 머신에 대한 비교 그리고 컨테이너가 어떻게 발전 되어 왔는지?`를 정말 자세하게 소개 하고 있으며, 윈도우에서는 어떻게 구현을 하는지도 설명 한다. 자세한 설명이다 보니, 굉장히 OS 영역에 관련 된 정보들이 있어서 이해 하는데 쉽진 않다.

[월간 개발자스럽다 #52](https://blog.gaerae.com/2020/02/monthly.html?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&utm_medium=social)

- 이미 소개 했던 글들도 많지만, 많은 이들이 본 글들이기에 다시 봐도 좋은 글들이 많이 있고, 내가 보지 못한 글도 있어서 재미있게 봤다.

[라운드 로빈(Round Robin) DNS를 활용한 로드 밸런싱(Load Balancing)](https://m.blog.naver.com/sehyunfa/221691155719)

- `DNS`를 이용해 부하 분산을 하는 방법은 처음 봤는데, 역시 내가 모르는 정보들이 정말 많다는 것을 알 수 있었다. 이 방법 또한 장/단점이 모두 있는데, `health check`에 대한 부분이 가장 핵심이었다.

[하루에 1000번 배포하는 조직 되기 | 뱅크샐러드](https://blog.banksalad.com/tech/become-an-organization-that-deploys-1000-times-a-day/)

- `1000번의 배포를 할 수 있는 조직인가?`에 도달 하기 위한 여정을 그린 글인데, 뱅크 샐러드의 개발 철학들이 좋은 방향으로 성장하는 느낌을 받았다. 그러한 부분들이 결국에는 개발자들에게는 이점이 아닐까? 싶기도 하다. 그런 점에서 **다양한 기술들을 잘 활용하는 방식이 좋아 보였고**, `bot`을 통해 배포 자동화를 이룩하는 것은 큰 장점이라고 생각한다.

[폐쇄망 환경의 배포 시스템 개발기 | 뱅크샐러드](https://blog.banksalad.com/tech/how-we-have-built-alice/)

- `뱅크샐러드의` 블로그인데, 이번 글은 `폐쇄망 환경에서 쓸 수 있는 배포 시스템 개발한 경험`을 잘 정리 해주었다. 선택과 집중을 통해 무엇이 필요하고, 어떤 부분이 중요한지를 잘 선택하는 고뇌가 담겨 있어 좋았다.

[원격근무 가이드 총정리](https://medium.com/@pengdo/%EC%9B%90%EA%B2%A9%EA%B7%BC%EB%AC%B4-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%B4%9D%EC%A0%95%EB%A6%AC-10f83f00e3d3)

- 원격 근무에 대한 다양한 글들이 있어서 참고 하기 좋다. 코로나로 인하여 원격근무를 시행하는 곳이 많은데, 나는 좀 더 평소에도 **유연하고 자유로운 체계를 가지면 좋겠다는 생각도 있다.** 물론, 불편한 점도 있지만 굳이 주 5일을 매일 출근 해야 한다는 것도 큰 비용이라는 생각이다. **꼭 출근만이 업무일까?** 회사들의 다양한 근무체계가 생겨나면 좋겠다. `퇴근 했다고 해서 우리가 일을 안하는 건 또 아니지 않는가?`

[개발자가 공부로 살아남는 방법](https://evan-moon.github.io/2019/08/26/how-does-developer-study/)

- 참 좋은 글을 많이 써두셨는데, 공부에 관하여 불안함이나 어떤 방향으로 가야 할지 모르겠다면, 읽어보면 도움이 많이 된다. `충분히 고민을 많이 하셨고, 앞서서 다양한 시도를 해 봤기에 나오는 팁들이 아닐까? 생각 한다.`

[iOS 개발자 싱가폴 이직기](https://soojin.ro/blog/singapore)

- 좋은 글을 자주 올려주시고, 번역도 자주 해주셔서 염탐하는데, 이직기를 생생하게 올려주셨다. 사실 이직 안해본 나로써는 아직 두려움의 시도라 생각하는데, **다들 잘 하는 걸 보면 대단하다는 생각이 든다.** 물론, 해외에서 일하게 되는건 되게 꿈 같은 일이라 글을 읽으면서 부럽기도 했다.

[A half-hour to learn Rust](https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/)

- 30분동안 러스트를 배울 수 있는 글인데, 기초적인 문법과 러스트를 잘 설명 하고 있다. 러스트를 배우고 싶다면, 한 번 배워보는 것은 어떨까? 결국, 프로그래밍 언어를 배우는 가장 빠른 방법은 `튜토리얼과 언어 컴파일러를 설치 하는데서 시작하는 것 같다? 그리고 "Hello World"`

[deploy 브랜치 전략 활용 방법](https://medium.com/daangn/deploy-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95-545f278ca878)

- 일을 하다 보면, 매번 토론의 장을 만드는 것이 바로 `Branch Strategy`을 정하는 것인데, 가장 많이 쓰는건 `Gitflow`일 것이다. 물론, 굉장히 많은 전략들이 있다. **가장 중요한 부분은 자동화 관리 되어야 할 브랜치들은 자동화를 도입하는 것이다. 모든 브랜치를 수동 관리 하는 것은 어렵다.** 그와 관련 되어 고민을 통해 만든 `deploy` 브랜치 전략에 대한 당근 마켓의 일화이다. 읽어보면 도움이 많이 된다.

### Container

[Istio를 활용해 Multi Cluster 환경에 Service Mesh 구성하기](https://yunsangjun.github.io/blog/istio/2019/08/11/istio-multi-cluster-mesh.html#disqus_thread)

- `Istio`를 활용해서 멀티 클러스터 환경에서의 서비스간 통신이 가능함을 실제 예제를 보여주며 설명하고 있다. `Service Mesh`가 무엇인가? 감이 잘 오지 않는다면, [쿠버네티스 서비스 메시 기술, '이스티오'란?](<[http://www.ciokorea.com/news/115704#csidxfd41b03547a0b48ae86ddfac51d3df9](http://www.ciokorea.com/news/115704#csidxfd41b03547a0b48ae86ddfac51d3df9)>), [Service Mesh란?](<[https://medium.com/dtevangelist/service-mesh-란-8dfafb56fc07](https://medium.com/dtevangelist/service-mesh-%EB%9E%80-8dfafb56fc07)>) 두 링크를 확인 해보자.

### 💻Front-End

[나는 프론트엔드를 안다고 말할 수 있을까?](https://evan-moon.github.io/2020/03/02/what-is-knowing/)

- 내가 생각하는 개발자 중에서 글을 정말 잘 쓰시는 분인데, 이 분도 이러한 고민을 안고 살아간다는 점은 나에게 좀 적잖은 충격이긴 했다. 나는 실질적으로 `풀스택 개발`을 하고 있는데, 농담처럼 하는 말이 하나 있다. `"하나도 잘 하기 어려운데, 둘 다 해야 되니 둘 다 결국 못하는 사람"`이라고 말하곤 한다. 항상 고민이었던 물음이었다. 그런데 어떻게 생각해보면, 개발자라는 범주 아닐까? 라는 생각을 한다. 퍼블리셔의 내용이 나왔으니 하는 말이지만, 쉽게 말하면 `마크업(퍼블리싱)에 대한 부분도 개발자라 생각 한다.` 수준 높은 마크업을 만들어 내는 사람들은 정말 적다. 그럼에도 그들은 **스스로 개발자라 불리는 것이 익숙치 않은데, 나는 이게 문제라 생각 한다.** **무언가 만들어 내는 역할을 지녔다면, 개발자** 그리고 **내가 어떤 영역에 앎과 모름에 대한 부분은 모든 것에 있어서 상대적이다.** **잘함에 대한 부분도 마찬가지다.**

[Redux에서 Normalize 다루기](https://jbee.io/react/react-redux-normalize/)

- 현재 내가 일하는 곳에서 `Nomalize`를 잠시 고려를 하기도 했었지만, 사실 구조적으로나 심리적인 요인에 의해 정규화를 하기는 어려웠다. **(물론, 지금은 또 다를 수 있다.)** 하지만, 변하지 않는 진실 하나는 `결국 어떤 목적을 가지고 어떤 방향으로 나아가는지? 정답이 아닐까?` 생각 한다. 본문에 써 있듯이 정규화가 모든 상황에 정답은 아닐 것이다. 예전에는 필요 없었다고, 지금은 필요하지 않은 건 또 아니다. (그래서 어렵다.)

[2020-02-25: TypeScript 3.8 정식 릴리스, ESLint 7.0.0 변경 예정 사항](https://jser.info/ko/2020/02/25/typescript-3.8-eslint-7.0.0/)

- `JavaScript`와 관련된 기술 뉴스를 큐레이션 하는 주간 블로그이다. 2월 글이긴 하지만, 관심 있는 글들이 있어서 가져왔다. `TS3.8`이 릴리즈 되었는데, 실무에서 아직 적용을 하진 않았다. 그치만, 3월 내로 적용하면 쓸만한 것들이 있어 보였다.

### 🛠Tool

[ytdl-org/youtube-dl](https://github.com/ytdl-org/youtube-dl)

- `CLI`에서 유투브 영상을 다운 받을 수 있도록 해주는 툴이다.

[Bashhub · Every command.](https://bashhub.com/)

- `Bash`의 히스토리를 `Hub`에 올리는 건데, 사실 좋은가? 싶기도 하다. (`peco`를 잘 쓰면 된다.)

[Download Blisk - a browser for web developers](https://blisk.io/)

- 개발자를 위한 브라우저인데, `써 봐야 좋은지? 안 좋은지?` 알지 않을까? 크로미움 기반이다. 장점은 확실히 있어 보여서 써 보려고 한다.

[Compare salaries and career levels across companies | Levels.fyi](https://www.levels.fyi/)

- `외국 회사의 연봉과 레벨`에 대한 정보를 알 수 있는 페이지이다.

### 🤟🏻일반적인

[협업에 관하여](https://ppss.kr/archives/213284)

- `"모든 일에 참여해서 하나부터 열까지 같이 하는 것이 협업이 아니다. 협업이란 프로젝트에 참여하는 사람들의 전문성을 레버리지(leverage) 하는 것이다."` 이 글에서 협업의 진짜 목표를 알게 되었다. 윈윈 하는 방법에 대해 정말 잘 소개 하고 있고, 예시를 통해 어떤 오해를 하게 되는지? 소개 한다.
