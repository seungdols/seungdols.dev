---
layout: post
title: '그냥 저냥 #위클리뉴스 #47'
description: '그냥 저냥 #위클리뉴스 #47'
date: 2019-08-03 23:13:00
category: weekly-news
tags: [weekly-news, programming]
comments: true
draft: false
---

### JavaScript

[5 ES2019 features you can use today - LogRocket Blog](https://blog.logrocket.com/5-es2019-features-you-can-use-today/?fbclid=IwAR0uceY47tfrwGoVylhtB4gM2KvjKrJTG21DocVHGu_QQSM3h6puUNKnVoM)

- `ES2019`에서 신규로 추가 되는 기능에 관한 설명인데, 아마 대다수분들이 `Google I/O 2019` 세션에서 확인하셨다시피, `flat(), flatMap()`함수가 추가 된다. 이 밖에도 다른 기능들이 추가 되니 확인 하여, 실제로 사용 해보면 좋겠다.

[Washing your code: avoid conditions](https://blog.sapegin.me/all/avoid-conditions/?fbclid=IwAR0BOAksHDQfJGxSbkejujFesx84MXQx9CAh5SOU4EawVFzW_Kx-OD5Oq0I)

- `JavaScript`을 사용하는 데에 있어서 불필요하게 조건을 사용하는 경우를 바꿔 보다 가독성과 `JavaScript` **언어 특성에 맞게 작성하는 방법**을 알려주는 글이다.

[Washing your code: avoid loops](https://blog.sapegin.me/all/avoid-loops/)

- `JavaScript`를 사용하는 코드의 **반복문에** 관한 코드를 좋게 만드는 방법에 관한 시리즈 글인데, 일반 반복문을 사용하는 방법과 `Array`의 함수들을 이용하는 방식을 비교한다. 그러나, **매번 반복문을 사용하지 않는** 것도 문제가 있다고 설명한다.

[How to use redux-saga](https://dailyhotel.io/how-to-use-redux-saga-63a6078c74b3)

- `redux`를 사용한다면 보통 `thunk` **or** `saga`를 많이 선택해 사용을 하는 편인데, 요즘은 또 Saga 관련한 글이 많고, 더 명확하다는 평이 많아졌다. 그 `Saga`를 어떻게 사용 하는지에 관한 글이다.

[React에서 root import하기](https://dev-yakuza.github.io/ko/react/root-import/?fbclid=IwAR0MkwtLYk8X2Vh2i0T9L5jmUmcmG2KQZ-DjUZ5yDkDTz56g51bUlFXFOwM)

- 폴더 기준의 루트로는 사용해 본적이 없는데, 이런 글이 있어서 괜찮다는 생각이 들었다. 보통은 하위 `src` 디렉토리 기준이나, 특정 기준의 상대경로 혹은 절대경로를 많이 사용하는 편이지 않나? 생각을 했다.

[React에서 Typescript 사용하기](https://dev-yakuza.github.io/ko/react/typescript/?fbclid=IwAR1Wp60Rs7yIScJRsLaI-GhNX1PRX_WkDwIAZ6ra3Uk3CnHk7Nq_IgEMp_I)

- 리액트에서 `TS`를 적용하는 방법에 대한 소개글이다. 한 번 시간 내어 따라 해보고, Next.js도 적용 해보면 어떨까 싶기도 하다. 요즘은 또 `Next.js`가 대세니.. 써보고 싶긴 하다.

[Algebraic Effects for the Rest of Us](https://overreacted.io/algebraic-effects-for-the-rest-of-us/)

- React팀에서 무언가 이야기 하다 나온 주제 같은데, 뜻을 풀어 보면 `대수학 효과`라고 할 수 있는 건데, 사실 정확하게 이해하지 못했다. 그렇지만, **함수형 프로그래밍**에 관심이 많은 분이라면, 읽어보면 좋겠다.

[How to test React components with Jest & Enzyme - RWieruch](https://www.robinwieruch.de/react-testing-jest-enzyme/)

- `React Component`를 어떻게 테스팅 할까? 고민이 많은 분들이 참고하시면 좋은 `Enzyme`과 `Jest`를 통한 리액트 컴포넌트 테스트에 관한 글이다.

[JavaScript Visualizer](https://tylermcginnis.com/javascript-visualizer/)

- `JavaScript`의 주요 개념들`(Context, Hositing, Closure, Scope)`을 시각화 해주는 툴이다. 재미나게 써 볼만하다.

### Java

[가비지 컬렉션(Garbage Collection)](https://jungwoon.github.io/java)

- `Java` 환경에서 서비스를 처리 하다 보면, 겪을 수 있는 문제는 `STW(Stop-The-World)`로 해당 시간 동안에는 `Application`이 아무런 응답을 해줄 수 없는데, 이 시간이 굉장히 짧아야 한다. 만약, 성능 튜닝의 실수 혹은 옵션을 잘못 주는 순간 장애로 이어질 수 있다. 그래서 개념을 이해하는 것이 중요한데, 기본 개념부터 `G1 GC`까지 설명을 잘 해준 글이다. 물론, 최근에는 [ZGC](https://wiki.openjdk.java.net/display/zgc/Main)가 등장 했다. 나도 물론, `CMS, Parallel GC, G1 GC`정도만 사용 해 봤기에, `ZGC`는 잘 알지 못한다.

### Server

[GraphQL에서는 어떤 HTTP status code를 사용할까?](https://libsora.so/graphql/graphql-http-status-code/)

- `graphQL`의 `HTTP status code` 값이 굉장히 궁금하기도 했는데, 마침 동일한 궁금증을 가진 분의 글을 읽게 되어 궁금증이 해결 되었는데, 결과적으로는 `200 ok`를 리턴 한다. 결국, 모든 `response`에 대한 체크가 필요로 하게 된다는 것으로 이해를 했다.

### 개발자에게 도움이 되는

[흔한 2019년 상반기 회고](https://luckyyowu.tistory.com/404)

- 요우님의 상반기 회고글인데, 여러가지 고뇌와 히스토리가 잘 남아 있는데, 특히, `r2curl` 모듈을 만드셨는데, 많이 이용하는 것 같아 뿌듯해 하셨는데, 내심 읽으면서 좀 부러웠다. 나도 언젠가 `npm` 모듈을 올리리라 다짐을 하게 되었다.

[대안을 이야기하라](https://greypencil.tistory.com/111)

- 내가 항상 생각하던 바가, `"내가 못하면 시니어 개발자분들이 하시겠지."` 라는 사고였다. 그런데, 이는 단단히 착각 속의 생각이다. 사실, 개발 하는 데에 있어서 주니어, 시니어 구분이 무엇이 필요하겠는가?라는 생각이 점점 더 들게 되었다. 그리고, 시간이 지나면서 더 확실히 느끼게 되었다. `내가 잘하는 부분이 있을 수도 있다.` 시니어 개발자라고 다 잘하는 것은 아니다. **모든 역할에는 각자 책임이 있고, 각자 해내야 하는 부분이 있다는 것을 깨닫게 되었다.** 이 글을 읽으면서 많은 것을 느끼게 되었다.

[Git reset에 대해서 알아보자 - dydtjr1128's Blog](https://dydtjr1128.github.io/git/2019/07/28/Git-Reset.html)

- 매번 입력하는 `git` 명령어이기는 하지만, `option`에 관해서는 얄팍하게 인지하고 있었는데, 이 글을 통해 이해가 쉬웠다.

[[후기]MSA, K8S를 이용한 대륙의 서비스 개발 사례 | Popit](https://www.popit.kr/%ED%9B%84%EA%B8%B0msa-k8s%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%8C%80%EB%A5%99%EC%9D%98-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%9C%EB%B0%9C-%EC%82%AC%EB%A1%80/)

- 인상 깊은 부분은 자체 개발을 통해 `k8s`의 관리 도구를 만든 점인데, 보통은 스스로 만들진 않고, 오픈 소스 형태로 있는 부분을 활용하는데, 직접 만들어서 쓰는 점이 놀랍다. (직접 만든 것도 쉬운 일은 아니다.) 우선, 직접 만들게 되면, 내부에서 기민하게 처리가 가능하다는 점과 특화가 가능하다는 점이 좋다고 생각한다. 그런데, 글의 링크에도 있는데 **광군제**는 정말 대단한 1년 중의 하루 같다. 그 많은 트래픽을 어떻게 버티는 건지....

[[B급 프로그래머] 7월 4주 소식(개발/관리도구, 고성능 서버/데이터베이스 부문)](http://jhrogue.blogspot.com/2019/07/b-7-4.html)

- 여러 **개발/관리 도구, 고성능 서버/데이터베이스** 주제에 맞는 아티클이 주제에 맞게 분류 되어 있다. 특히, AWS가 이미 너무나 획기적인 Stack으로 변화하여, **사내 시스템만 쓰는 나로써는 잘 모르는 분야이다.** 그런데, 리디에서 **예약 인스턴스**를 활용하여 비용절감 한다고 한다. 쉽게 말하면, 일부 서버군을 이 정도는 기본적으로 쓰게 되는데, 어느 적정 규모의 서버군에 대해 **기간 약정을 하여 요금 할인 혜택**을 받는다는 것 같다. 확실히 AWS를 공부하는 것도 도움이 된다고 생각 하게 된다.

### 일반적인

[당신의 시야를 넓여줄 TED 영상 BEST 15](https://ppss.kr/archives/198440)

[살아남아라! 직장인: 사수 없이 성장하기](https://ppss.kr/archives/195598)
