---
layout: post
title: '그냥 저냥 #위클리뉴스 #59'
description: '그냥 저냥 #위클리뉴스 #59'
date: 2020-01-05 10:25:00
category: weekly-news
tags: [weekly-news, programming]
comments: true
draft: false
---

### 개발자에게 도움이 되는

[The Rust Programming Language](https://rinthel.github.io/rust-lang-book-ko/)

- 확실히 요즘 러스트의 이야기를 많이 듣게 되는데, 러스트도 좋은 대안의 언어라고 생각한다. 나름 학습이 쉽진 않지만, 엘릭서나 러스트 정도는 재밌게 배울 수 있을 것 같다. 올해의 목표로 생각 하고 싶지만, 여력이 많이 없다.

[체대 출신 개발자의 2019년 회고](https://ryan-han.com/post/memoirs/memoirs2019/)

- 확실히 노력을 하면 길이 열리는구나를 깨닫게 된다. 물론, 쉬운 길은 아니겠지만, 꾸준함과 정보력을 바탕으로 노력하면 되는 문제라고 생각하게 되었다. 꼭 읽어 보시길 바란다.

[훌륭한 팀원의 조건 - Strong Views, Weakly Held](https://medium.com/@kpak/%ED%9B%8C%EB%A5%AD%ED%95%9C-%ED%8C%80%EC%9B%90%EC%9D%98-%EC%A1%B0%EA%B1%B4-strong-views-weakly-held-17880611d962)

- 결국은 다양한 관점을 익히려는 태도를 가져야 하고, 유연한 태도를 위해 노력해야 한다는 아주 단순한 글 같지만 실제로 현실에서 그런 캐릭터가 있다는 것과 그 캐릭터와 같이 일할 수 있다는 것은 엄청난 장점이다. 왜냐하면 정말 드물기 때문이다.

[Y2019 개인 회고](https://medium.com/@mjspring/y2019-%EA%B0%9C%EC%9D%B8-%ED%9A%8C%EA%B3%A0-c28113ac005e)

- 나는 사실 거의 팬? 수준에 오른 **박미정님의 팬**이다. 과거에는 [lucy.park님의 블로그](https://www.lucypark.kr/blog/)를 정말 열심히 탐독했다. 그 이후 박미정님을 어쩌다 파이썬 발표 자료를 보고 난 뒤에, 알게 된 이후 올라오는 글들을 정말 잘 읽었다. 왜? 팬이 되었느냐? 라고 생각하면, 일단은 글속에서 느껴지는 분위기는 참 재밌게 일 하시는구나. 그리고 되게 열심히 기술 리딩을 하시는 구나 싶었다. 두 가지의 이유였고, 부러움도 좀 있었다. 나도 뭔가 저런 에너지를 발산하는 개발자면 좋겠다? 라는 희망이 내포 되어 있다. **그리고 그냥 멋있다.** 회고 글을 통해 나도 무언가 많은 고민을 하게 되었다.

[2019 회고 모음](<[https://www.notion.so/2019-09f05e04c3bc4019b42e619403ca757f](https://www.notion.so/2019-09f05e04c3bc4019b42e619403ca757f)>)

- 누군가 회고 모음을 정리 해주셨다. 많은 분들의 회고가 적혀 있다.

[2019 회고 모음](<[https://github.com/oaksong/developers-retrospective](https://github.com/oaksong/developers-retrospective)>)

- 깃허브로도 연간 회고를 누군가 모아 주셨다.

[조금은 무거운 2019 회고](https://taetaetae.github.io/2019/12/29/review-2019/)

- **태태태님의 회고**, 읽을 수록 엇? 나는 무엇을 성장을 한 것인가? 라는 부끄러움이 몰려왔다. 그래서 사실 회고글은 읽으면서 나를 항상 부끄럽게 만드는 것 같다. 그런 점에서 순기능이 있지 않을까? 싶기도 하다. 서비스 개발자의 고민은 항상 존재 하게 되는 것 같다.

[2019 하반기 회고](https://jojoldu.tistory.com/471)

- 정말 오래 전부터, 보던 이동욱님의 블로그이자, 2019 하반기 회고글이다. 이제는 책도 내시고, 개발 파드 리드까지!!! 하시는 주니어 개발자의 빛이 되신 것 같다. `우아한 세미나 - 스프링 배치`에서 발표하실 때, 직관도 나름 했었다. 이렇게까지 열심히 하시는 원동력이 좀 궁금하기도 하고, 시간 관리를 정말 잘 하셔서 대단하시다는 말 밖에 안 나오는 개발자 중에 한 분이다. (박미정님 외의 또 다른 나에게는 개발 연예인 같은 분)

### Back

[GET이냐 POST냐 그것이 문제로다](<[https://homoefficio.github.io/2019/12/25/GET이냐-POST냐-그것이-문제로다/?fbclid=IwAR3zRyhUc2CIZIesYUj6HLq8XxzNCHlPK4KSerHqoye5_Rsfpdb1he-_w_M#btn-open-shareoptions](https://homoefficio.github.io/2019/12/25/GET%EC%9D%B4%EB%83%90-POST%EB%83%90-%EA%B7%B8%EA%B2%83%EC%9D%B4-%EB%AC%B8%EC%A0%9C%EB%A1%9C%EB%8B%A4/?fbclid=IwAR3zRyhUc2CIZIesYUj6HLq8XxzNCHlPK4KSerHqoye5_Rsfpdb1he-_w_M#btn-open-shareoptions)>)

- 뭐가 좋은지 아닌지는 모르지만, 중요한 부분은 근본적인 핵심에 초점을 맞추는 것이다. 글 속에 나오는 말이 핵심이라고 생각하게 되었다. API는 결국 약속이라는 의미 이기에 무엇이 더 나은지는 상황 마다 약속할 문제! 라고 생각 하면 편하지 않나? 라는 생각이다.

[메인 데이터베이스 IDC 탈출 성공기 - 우아한형제들 기술 블로그](http://woowabros.github.io/experience/2019/12/19/ruby_database.html?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&utm_medium=social)

- 이 글을 읽으면서 참, AWS가 좋다는 생각을 하게 되었다. 결국, 서버의 관점에서의 IDC는 점차적으로 사라지게 되고, 모든 관리를 이제 S/W적으로 하게 되는 시기에 도래 했다는 생각 하게 되었다. 본문 속에 나오는 글에 크게 공감이 갔던 부분은 `코드에 주인 의식을 갖는 것`과 `프로젝트 범위에 레거시 제거 또한 포함` 되어야 한다는 부분이다. 생각처럼 쉬운 일은 아니지만, 메인 데이터 베이스에서 탈피하여, 작게 쪼개진 형태의 DB를 관리하여, 서비스를 한다는 것은 또 다른 어려움이 있을 것 같은데, 그 다음 이야기도 궁금하다. `MSA`가 될 수록 결국, `네트워크 효율화`가 더 필요 해진다는 점도 고려 포인트 일 것 같다.

### Front

[Infinite Scroll with Intersection Obsever API](https://medium.com/@inthewalter/infinite-scroll-with-intersection-obsever-api-d672a80c8507)

- Web API를 이용해 무한 스크롤을 구현하는 예제를 담고 있다. 물론, 라이브러리를 사용하는 것이 간편하고 효과적이지만, 원리를 아는 것도 좋은 방법이라고 생각 한다.

[로컬에서 CORS policy 관련 에러가 발생하는 이유](https://velog.io/@takeknowledge/%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-CORS-policy-%EA%B4%80%EB%A0%A8-%EC%97%90%EB%9F%AC%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-3gk4gyhreu)

- 개발 하다 보면 겪는 당황스런 부분인데, 처음 만나면 당황하기 쉽다. 그에 대한 의문을 잘 정리 해주신 글입니다.

[자바스크립트 엔진에 대한 오개념과, Inline cache](https://velog.io/@noyo0123/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-VSCODE-%EA%B0%9C%EB%B0%9C%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0-lfk2a3yuo5)

- 이해하기 어려운 내용이긴 하지만, 알려고 노력할 수록 훗날 다시 보면 이해하기 쉬워 지는 때가 오지 않을까?라는 생각으로 JavaScript Engine 관련 글을 읽습니다. 물론, 지금 설명해보라고 하면, 잘 모릅니다. 그래도 읽으면 좋더라구요. (경험상)

### 읽으면 좋은

- [당신의 개발자들은 결코 느리지 않다. ⋆](http://tech.trenbe.com/?p=547)

- [돈만 벌기 위해 일하는 이들이 겪을 불행 12가지](https://ppss.kr/archives/208686)

- [하루가 힘들 때는 '거대한 그림'을 그리며 견뎌낼 것](https://ppss.kr/archives/208985)

- [퇴사를 꿈꾸는 직장인들이 퇴근 후 할 일](https://ppss.kr/archives/208555)

- [[매일 돈 버는 여자] INTRO. 소소한 벌이를 시작한 이유](https://ppss.kr/archives/209181)

- [재미있고 기발하고 신기한 에러페이지 디자인 10가지](https://ppss.kr/archives/208297)

- [사내 커뮤니케이션의 중요성](https://ppss.kr/archives/207862)

- [취향 따라 영어 공부하자! 당신의 취향에 맞는 영어 읽기 사이트 추천](https://ppss.kr/archives/207623)

- [가난하면서 관대하기란 얼마나 어려운가](https://ppss.kr/archives/208439)

- ['나 아니면 안 된다'는 '난 팀장'](https://ppss.kr/archives/207640)

- [연봉을 높이는 가장 쉬운 방법은? - 이상한모임](http://blog.weirdx.io/post/61620)
