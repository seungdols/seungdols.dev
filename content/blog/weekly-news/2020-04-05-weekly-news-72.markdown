---
layout: post
title: '그냥 저냥 #위클리뉴스 #72'
description: '그냥 저냥 #위클리뉴스 #72'
date: 2020-04-05 23:04:25
category: weekly-news
tags: [weekly-news, programming]
comments: true
draft: false
---

### 💻개발자에게 도움이 되는

[LINE 메시징 서버가 새해 트래픽을 대비하는 과정 - LINE ENGINEERING](https://engineering.linecorp.com/ko/blog/how-line-messaging-servers-prepare-for-new-year-traffic/)

- 라인 메신저의 특이한 문화 중 하나가 바로 `"신년 대응"`, 라인 개발자들의 책을 읽어보니 다들, 12월 31일에 모여서 신년 대응 이후 퇴근을 한다고 하던데, 사실 경험 해보고 싶은 문화이기도 하다. 그만큼 라인 메신저팀의 주된 업무인데, 이를 위해 대비 하는 과정에 대해 담고 있다. 그리고 `Armeria`를 적극 도입하는 것을 알 수 있었고, `Spring framework`와 같이 쓸 수도 있다는 점이 매력적이긴 하다. 물론, `Armeria`는 그냥 자체로 써도 안전성이 있는 것 같다. 써 보고 싶긴 하다.

[SI회사에 입사하기 전 읽으면 좋은 글 - SI의 단점](https://preamtree.tistory.com/133)

- 여전히 바뀌지 않은 문화인 것 같다. 내가 대학 졸업 전부터도 `"SI는 가지 말아라"`는 선배들의 조언을 들었다. 일단 가는 순간 개미 지옥이라 빠져 나오기 쉽지 않다고 말이다. 그런데, 이런 문화를 가진 곳에 내가 발을 들여 놓았다면, 나는 아마 개발자를 포기 했으리라...😭그럼에도 불구하고, `SI`에도 조금씩 변화는 오는 중이라 믿고 있다.

[세상에 나쁜 코드는 없다.](https://brunch.co.kr/@kmongdev/18)

- 이 분의 말처럼, 나쁜 코드는 없다. 누군가는 이해하기 쉬운 코드이라도, 팀원은 그 코드가 이해하기 어려운 코드 일 수도 있다. `즉, 나만의 코드가 정답은 아니라는 소리이며, 클린 코드더라도, 팀원들의 이해 수준이 그 수준이 아니라면, 끌어 올려주거나? 아니면 내가 적당한 수준의 코드를 만들어 나아가는게 좋다고 생각 하는 편이다.` 결국, **팀원들 모두가 같은 수준의 코드 생산을 해야 한다.** 이렇게 코드를 만드는게 정말 어렵다.

[LINE 신입 SW 개발자 코딩 테스트, 이렇게 만들어졌습니다 - LINE ENGINEERING](https://engineering.linecorp.com/ko/blog/2020-line-sw-developer-recruit-coding-test/)

- `LINE`에서 신규 개발자를 채용하기 위해 개발자 코딩 테스트를 작년부터 개편하기 시작했다고 한다. 나는 이런 변화가 정말 좋다고 생각 한다. 알고리즘 대회로 변질 되어 버린, `SW 개발자 코딩 테스트가 이렇게 실질적인 문제로 변화` 하는 것은 좋다고 생각 하고, 다른 회사들도 알고리즘 대회에서 벗어 났으면 좋겠다.

[다 함께 TDD](https://velog.io/@hax0r/%EB%8B%A4-%ED%95%A8%EA%BB%98-TDD-u5v3zo6e)

- `TDD`는 쉽지 않은 영역이긴 하다. 습관의 영역이기 때문이다. 누구나 테스트 코드 짜고 싶어 한다. (물론, 그렇지 않은 사람도 있을 것이다.) 조금씩 훈련 하는 것이 좋다고 생각 하는 편이고, `TDD` 보다는 부담감을 줄일 수 있는 방법으로 접근하면 좋겠다. `내 생각은 구현체를 먼저 작성해도 좋다. 다만, 해당 구현체를 테스트 할 수 있는 테스트 코드를 나와 내 동료가 같이 쌓아 올리는 공간에 보관 하는 것이 중요하다.`

### 💻Java

[Java 예외처리 ( feat. Effective java )](https://blog.ordinarysimple.com/wiki/2020-03-29-java-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC-feat-effective-java/)

- 매번 아는 것 같은 느낌이지만, 막상 내가 예외 처리를 잘 하고 있는건가? 의문이 들었다. `다시 좀 봐야 할 책은 Effective Java 3판인가...!`

[토비의 봄을 담은 제네릭 1편](https://jordy-torvalds.tistory.com/16)

- `Java Generics`에 대해 정리를 정말 잘 해주셨다. 나도 봤던 내용들인데도 시간이 지나니, 잊혀진다. 다시 복습 중요한 것 같다.

[토비의 봄을 담은 제네릭 2편 람다와 인터섹션](https://jordy-torvalds.tistory.com/17)

- `람다와 인터섹션의 개념`을 정리 한 글인데, 생각보다 이해가 쉽지 않다. 계속 봐도 봐도 Java를 저렇게 쓰는거구나 싶기도 하다.

[조금 더 괜찮은 Rest Template 1부 - Retryable](https://taetaetae.github.io/2020/03/22/better-rest-template-1-retryable/)

- `Retryable`을 이용한 `Rest Template`을 소개 하는 글이다. 삽질한 방법들에 대해 자세하게 소개 하고 있다.

[조금 더 괜찮은 Rest Template 2부 - Circuit-breaker](https://taetaetae.github.io/2020/03/29/better-rest-template-2-netflix-hystrix/)

- `Circuit-breaker`에 대해 설명 하는 글이며, 실제 코드를 기반으로 예시 단계별로 설명하고 있어서 따라 하기 쉽다.

[Learning Functional Programming with JavaScript - Anjana Vakil - JSUnconf](https://www.youtube.com/watch?v=e-5obm1G_FY&feature=youtu.be)

- `함수형 프로그래밍에 대한 기본`을 잘 설명 해주시고, 발표자가 앎과 모름에 대해 정확하게 잘 구분 하시는 부분이 좋았고, 좋은 레퍼런스랑 라이브러리를 소개 해주셨다.

[An introduction to functional programming](https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming)

- 위의 유투브 영상에서 도움을 많이 받았다고 한 `함수형 프로그래밍에 대한 설명글`이다. 조금 길지만, 도움이 많이 된다.

[naver/fe-news](https://github.com/naver/fe-news/blob/master/issues/2020-04.md)

- 네이버에서 `FE 뉴스 큐레이션`을 진행하는데, 이번 4월에 해당하는 글 모음입니다. 함수형 프로그래밍에 대한 글이 좋고, 번역도 5번째 글까지 번역이 되어 있다. 그 외에도 유익한 글들이 있다.

### 🛠Tool

['매일 써도 좋을' 비주얼 스튜디오 코드 확장 기능 7가지](http://www.ciokorea.com/news/130582)

- `VS Code plugin` 추천 글이다. `Data preview, jumpy` 같은 툴들은 진짜 유용해 보여서 보자마자 설치 했다. `Jumpy`는 사실 `vim`을 잘 쓰면 바로 적용이 가능한 부분인데, 사실 그렇게 `vim`의 하드 유저는 아니여서 설치해보았다.

[mori](http://swannodette.github.io/mori/)

- `immutable.js`는 익히 들어 봤지만, `mori`는 처음 들어 보았다. `clojurescript` 기반으로 작성 되어 있고, `JS`로 바로 사용 한다고 하는데, 개인 프로젝트에서 써봐야겠다.
